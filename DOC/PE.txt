Control PE dataflow

filter
1) path : fifo -> rf -> multiplier
2) filter fixed when one row finished

feature
1) path : fifo -> rf -> multiplier
2) feature slide in to rf when one row element acc finished

psum
1) path : rf -> adder
2) every cycle, accumlate and out


RF는 write시 clock sync에 update
Showahead하게 계속 data 뿜어내는 중 -> 실제로 data가 나오는데 delay가 존재하지 않나?
buffer로 처리해줘야 될거 같은데 잘 모르겠다

read RF && buffer en

rf가 저장하고 있어야 하는 것?
weight고정
feature는 slide
psum?
크기는?
feature: 1byte x feature row(13>)
weight : 1byte x weigth row(3>)
psum   : 2byte x 
                
                                     
Cycle           1       2       3       4       5       6       7       8       9       10      11      12      13      14
feature_fifo:   rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    
filter_fifo:    rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    rden    

fea_fifo_o      a1      a2      a3      a4      a5      a6      a7      a8      a9      a10     a11     a12     a13     
fil_fifo_o      b1      b2      b3      


feature_rf
feature_wd:     a1      a2      a3      a4      a5      a6      a7      a8      a9      a10     a11     a12     a13     
feature_rf_we:  1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    1'b1    
feature_rf_wa:  x       x       x

feature_rf_ra:          x       x       x      
feature_rd:             a1      a2      a3      a2      a3      a4      a3      a4      a5

filter_rf
filter_wd:     b1      b2       b3      
filter_rf_we:  1'b1    1'b1    1'b1
filter_rf_wa:  x       x       x

filter_rf_ra:          x        x       x     
filter_rd:             b1       b2      b3      b1      b2      b3      b1      b2      b3      b1      b2      b3      b1      b2      b3 

buffer_stage
feature_buf:                    a1      a2      a3      a2      a3      a4      a3      a4      a5
filter_buf:                     b1      b2      b3      b1      b2      b3      b1      b2      b3      b1      b2      b3      b1      b2      b3 

stage1_mul:                     a1,b1   a2,b2   a3,b3   a2,b1   a3,b2   a4,b3   a3,b1   a4,b2   a5,b3
mul_buf:                                a1,b1   a2,b2   a3,b3   a2,b1   a3,b2   a4,b3   a3,b1   a4,b2   a5,b3
stage2_mul:                             a1,b1   a2,b2   a3,b3   a2,b1   a3,b2   a4,b3   a3,b1   a4,b2   a5,b3

acc_psum                                1'b0    1'b0    1'b0    1'b0    1'b0    1'b0    1'b0    1'b0    1'b0    1'b0
add_buf                                         M1      M2      M3      M4      M5      M6      M7      M8      M9
    
psum_rf_ra                              c1      c1      c1      c1      c2      c2      c2      c3      c3      c3      
psum_rf_o                               ?       ?       P1      P2      ?       P4      P5      ?       P7      P8      
rst_psum_mux                            1'b1    1'b0    1'b1    1'b1    1'b0    1'b1    1'b1    1'b1    1'b0    1'b0
rst_to_add(d):                          ?       0       P1      P2      0       P4      P5      0       P7      P8


Adder:                                          M1,0    M2,P1   M3,MP2  M4,0    M5,P4   M6,P5   M7,0    M8,P7   M9,P8
Psum_RF_wd                                      P1      P2      P3(=C1) P4      P5      P6(=C2) P7      P8      P9(C3)
Psum_RF_wa                              ?       c1      c1      c1      c2      c2      c2      c3      c3      c3

psum_fifo_o                     
psum_fifp_rden

M1 + P      M2 + M1

            M1 + P
            
            
c1_1 + c1_2 + c1_3 = c1
activatation row width = 13
이전 psum accumlate가 13회 x 3개 이뤄져야 함
13개를 fifo에 저장
fifo + rf -> fifo
fifo + rf -> fifo

